import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack

val kotlinVersion = "1.5.20"
val serializationVersion = "1.2.1"
val ktorVersion = "1.6.1"
val kotlinWrappersVersion = "0.0.1-pre.216-kotlin-1.5.20"
val logbackVersion = "1.2.3"
val kmongoVersion = "4.2.7"

fun kWrapper(target: String): String =
    "org.jetbrains.kotlin-wrappers:kotlin-$target"

//npm
val reactVersion = "17.0.2"
val styledVersion = "5.3.0"


plugins {
    kotlin("multiplatform") version "1.5.20"
    id("dev.fritz2.fritz2-gradle") version "0.11.1"
    application
    kotlin("plugin.serialization") version "1.5.20"

}

group = "de.flensburg.orse.project"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    maven("https://s01.oss.sonatype.org/content/repositories/snapshots/")
}

kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = "15"
        }
        testRuns["test"].executionTask.configure {
            useJUnit()
        }
        withJava()
    }
    js(IR) {
        browser {
            commonWebpackConfig {
                cssSupport.enabled = true
            }
        }
        binaries.executable()
    }
    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion")
                implementation("io.ktor:ktor-client-core:$ktorVersion")
                implementation("dev.fritz2:core:0.11")
                // https://mvnrepository.com/artifact/dev.fritz2/components
                implementation("dev.fritz2:components:0.11.1")

                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1")

            }
        }
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
            }
        }

        val jvmMain by getting {
            dependencies {
                implementation("io.ktor:ktor-serialization:$ktorVersion")
                implementation("io.ktor:ktor-server-core:$ktorVersion")
                implementation("io.ktor:ktor-server-netty:$ktorVersion")
                implementation("ch.qos.logback:logback-classic:$logbackVersion")
                implementation("org.litote.kmongo:kmongo-coroutine-serialization:$kmongoVersion")
            }
        }

        val jsMain by getting {
            dependencies {
                implementation("io.ktor:ktor-client-js:$ktorVersion")
                implementation("io.ktor:ktor-client-json:$ktorVersion")
                implementation("io.ktor:ktor-client-serialization:$ktorVersion")

                // Wrappers
                implementation(project.dependencies.enforcedPlatform(kWrapper("wrappers-bom:${kotlinWrappersVersion}")))

                implementation(kWrapper("react"))
                implementation(npm("react", reactVersion))

                implementation(kWrapper("react-dom"))
                implementation(npm("react-dom", reactVersion))

                implementation(kWrapper("styled"))
                implementation(npm("styled-components", styledVersion))

            }
        }
    }
}

application {
    mainClass.set("ServerKt")
}

// include JS artifacts in any JAR we generate
tasks.getByName<Jar>("jvmJar") {
    val taskName = if (project.hasProperty("isProduction")) {
        "jsBrowserProductionWebpack"
    } else {
        "jsBrowserDevelopmentWebpack"
    }
    val webpackTask = tasks.getByName<KotlinWebpack>(taskName)
    dependsOn(webpackTask) // make sure JS gets compiled first
    from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
}

distributions {
    main {
        contents {
            from("$buildDir/libs") {
                rename("${rootProject.name}-jvm", rootProject.name)
                into("lib")
            }
        }
    }
}

// Alias "installDist" as "stage" (for cloud providers)
tasks.create("stage") {
    dependsOn(tasks.getByName("installDist"))
}

tasks.getByName<JavaExec>("run") {
    classpath(tasks.getByName<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
}